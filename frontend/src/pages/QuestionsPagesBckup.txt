// Updated QuestionsPage.jsx with correct progress loading and status rendering

import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import API from '../services/api';

function QuestionsPage() {
  const { roleId } = useParams();
  const [questions, setQuestions] = useState([]);

  useEffect(() => {
    if (roleId) {
      fetchQuestions(roleId);
    }
  }, [roleId]);

  const fetchQuestions = async (selectedRole) => {
    try {
      const userId = localStorage.getItem('user_id');
      const response = await API.get(`questions/${selectedRole}/?user=${userId}`);
      const notesRes = await API.get('notes/');
      const questionsData = response.data;
      const notes = notesRes.data;
  
      const questionsWithExtras = questionsData.map((q) => {
        const noteObj = notes.find((n) => n.question === q.id);
        return {
          ...q,
          note: noteObj?.note || '',
        };
      });
  
      setQuestions(questionsWithExtras);
    } catch (error) {
      console.error('Error fetching questions:', error);
    }
  };
  

  const handleSaveNote = async (questionId, noteContent) => {
    try {
      const response = await API.get(`notes/?question=${questionId}`);
      if (response.data.length > 0) {
        const noteId = response.data[0].id;
        await API.patch(`notes/${noteId}/`, { note: noteContent });
        alert('Note updated successfully!');
      } else {
        await API.post('notes/', {
          question: questionId,
          note: noteContent,
        });
        alert('Note saved successfully!');
      }
    } catch (error) {
      console.error('Error saving note:', error);
      alert('Failed to save note.');
    }
  };

  const handleProgressUpdate = async (questionId, status) => {
    try {
      const accessToken = localStorage.getItem('accessToken');
      const progressRes = await API.get('progress/', {
        headers: { Authorization: `Bearer ${accessToken}` },
      });

      const existing = progressRes.data.find((p) => p.question.id === questionId);

      if (existing) {
        const patchRes = await API.patch(
          `progress/${existing.id}/`,
          { status },
          { headers: { Authorization: `Bearer ${accessToken}` } }
        );
        setQuestions((prev) =>
          prev.map((q) => (q.id === questionId ? { ...q, status: patchRes.data.status } : q))
        );
      } else {
        const postRes = await API.post(
          'progress/',
          { question: questionId, status },
          { headers: { Authorization: `Bearer ${accessToken}` } }
        );
        setQuestions((prev) =>
          prev.map((q) => (q.id === questionId ? { ...q, status: postRes.data.status } : q))
        );
      }
      alert(`Progress updated to ${status}`);
    } catch (error) {
      console.error('Error updating progress:', error);
      alert('Failed to update progress.');
    }
  };

  return (
    <div
      style={{
        flexGrow: 1,
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        padding: '20px',
        maxWidth: '900px',
        margin: '0 auto',
        width: '100%',
      }}
    >
      <h1>Available Questions</h1>

      <ul style={{ listStyle: 'none', padding: 0, width: '100%' }}>
        {questions.map((q) => (
          <li
            key={q.id}
            style={{
              border: '1px solid #ddd',
              borderRadius: '8px',
              padding: '15px',
              marginBottom: '15px',
              backgroundColor: '#f9f9f9',
              color: '#212121',
            }}
          >
            <div style={{ display: 'flex', justifyContent: 'space-between' }}>
              <strong>{q.text}</strong>
              {q.status && (
                <span
                  style={{
                    padding: '4px 10px',
                    borderRadius: '20px',
                    backgroundColor: q.status === 'Completed' ? '#d4edda' : '#cce5ff',
                    color: q.status === 'Completed' ? '#155724' : '#004085',
                    fontSize: '12px',
                  }}
                >
                  {q.status}
                </span>
              )}
            </div>

            <div style={{ marginTop: '10px' }}>
              <button
                onClick={() => handleProgressUpdate(q.id, 'Bookmarked')}
                disabled={q.status === 'Bookmarked'}
                style={{
                  padding: '5px 10px',
                  marginRight: '10px',
                  backgroundColor: q.status === 'Bookmarked' ? '#ccc' : '#007bff',
                  color: 'white',
                  border: 'none',
                  borderRadius: '4px',
                  cursor: q.status === 'Bookmarked' ? 'not-allowed' : 'pointer',
                }}
              >
                Bookmark
              </button>

              <button
                onClick={() => handleProgressUpdate(q.id, 'Completed')}
                disabled={q.status === 'Completed'}
                style={{
                  padding: '5px 10px',
                  backgroundColor: q.status === 'Completed' ? '#ccc' : '#28a745',
                  color: 'white',
                  border: 'none',
                  borderRadius: '4px',
                  cursor: q.status === 'Completed' ? 'not-allowed' : 'pointer',
                }}
              >
                Mark Completed
              </button>
            </div>

            <div style={{ marginTop: '10px' }}>
              <textarea
                placeholder="Write your notes here..."
                value={q.note || ''}
                onChange={(e) =>
                  setQuestions((prev) =>
                    prev.map((item) =>
                      item.id === q.id ? { ...item, note: e.target.value } : item
                    )
                  )
                }
                style={{ width: '100%', padding: '8px', marginBottom: '8px' }}
              />
              <button
                onClick={() => handleSaveNote(q.id, q.note)}
                style={{
                  padding: '5px 10px',
                  backgroundColor: '#6c63ff',
                  color: 'white',
                  border: 'none',
                  borderRadius: '4px',
                }}
              >
                Save Note
              </button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default QuestionsPage;
